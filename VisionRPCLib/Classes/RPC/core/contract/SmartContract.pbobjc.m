// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/smart_contract.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "SmartContract.pbobjc.h"
#import "Vision.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(SmartContract);
GPBObjCClassDeclaration(SmartContract_ABI);
GPBObjCClassDeclaration(SmartContract_ABI_Entry);
GPBObjCClassDeclaration(SmartContract_ABI_Entry_Param);

#pragma mark - SmartContractRoot

@implementation SmartContractRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SmartContractRoot_FileDescriptor

static GPBFileDescriptor *SmartContractRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SmartContract

@implementation SmartContract

@dynamic originAddress;
@dynamic contractAddress;
@dynamic hasAbi, abi;
@dynamic bytecode;
@dynamic callValue;
@dynamic consumeUserResourcePercent;
@dynamic name;
@dynamic originEntropyLimit;
@dynamic codeHash;
@dynamic trxHash;

typedef struct SmartContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *originAddress;
  NSData *contractAddress;
  SmartContract_ABI *abi;
  NSData *bytecode;
  NSString *name;
  NSData *codeHash;
  NSData *trxHash;
  int64_t callValue;
  int64_t consumeUserResourcePercent;
  int64_t originEntropyLimit;
} SmartContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "originAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_FieldNumber_OriginAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SmartContract__storage_, originAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "contractAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_FieldNumber_ContractAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SmartContract__storage_, contractAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "abi",
        .dataTypeSpecific.clazz = GPBObjCClass(SmartContract_ABI),
        .number = SmartContract_FieldNumber_Abi,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SmartContract__storage_, abi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bytecode",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_FieldNumber_Bytecode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SmartContract__storage_, bytecode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "callValue",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_FieldNumber_CallValue,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SmartContract__storage_, callValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "consumeUserResourcePercent",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_FieldNumber_ConsumeUserResourcePercent,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SmartContract__storage_, consumeUserResourcePercent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_FieldNumber_Name,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SmartContract__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "originEntropyLimit",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_FieldNumber_OriginEntropyLimit,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SmartContract__storage_, originEntropyLimit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "codeHash",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_FieldNumber_CodeHash,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SmartContract__storage_, codeHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "trxHash",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_FieldNumber_TrxHash,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SmartContract__storage_, trxHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SmartContract class]
                                     rootClass:[SmartContractRoot class]
                                          file:SmartContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SmartContract__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SmartContract_ABI

@implementation SmartContract_ABI

@dynamic entrysArray, entrysArray_Count;

typedef struct SmartContract_ABI__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *entrysArray;
} SmartContract_ABI__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entrysArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SmartContract_ABI_Entry),
        .number = SmartContract_ABI_FieldNumber_EntrysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SmartContract_ABI__storage_, entrysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SmartContract_ABI class]
                                     rootClass:[SmartContractRoot class]
                                          file:SmartContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SmartContract_ABI__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(SmartContract)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SmartContract_ABI_Entry

@implementation SmartContract_ABI_Entry

@dynamic anonymous;
@dynamic constant;
@dynamic name;
@dynamic inputsArray, inputsArray_Count;
@dynamic outputsArray, outputsArray_Count;
@dynamic type;
@dynamic payable;
@dynamic stateMutability;

typedef struct SmartContract_ABI_Entry__storage_ {
  uint32_t _has_storage_[1];
  SmartContract_ABI_Entry_EntryType type;
  SmartContract_ABI_Entry_StateMutabilityType stateMutability;
  NSString *name;
  NSMutableArray *inputsArray;
  NSMutableArray *outputsArray;
} SmartContract_ABI_Entry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "anonymous",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_ABI_Entry_FieldNumber_Anonymous,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "constant",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_ABI_Entry_FieldNumber_Constant,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_ABI_Entry_FieldNumber_Name,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SmartContract_ABI_Entry__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inputsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SmartContract_ABI_Entry_Param),
        .number = SmartContract_ABI_Entry_FieldNumber_InputsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SmartContract_ABI_Entry__storage_, inputsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SmartContract_ABI_Entry_Param),
        .number = SmartContract_ABI_Entry_FieldNumber_OutputsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SmartContract_ABI_Entry__storage_, outputsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = SmartContract_ABI_Entry_EntryType_EnumDescriptor,
        .number = SmartContract_ABI_Entry_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SmartContract_ABI_Entry__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "payable",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_ABI_Entry_FieldNumber_Payable,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "stateMutability",
        .dataTypeSpecific.enumDescFunc = SmartContract_ABI_Entry_StateMutabilityType_EnumDescriptor,
        .number = SmartContract_ABI_Entry_FieldNumber_StateMutability,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SmartContract_ABI_Entry__storage_, stateMutability),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SmartContract_ABI_Entry class]
                                     rootClass:[SmartContractRoot class]
                                          file:SmartContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SmartContract_ABI_Entry__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(SmartContract_ABI)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SmartContract_ABI_Entry_Type_RawValue(SmartContract_ABI_Entry *message) {
  GPBDescriptor *descriptor = [SmartContract_ABI_Entry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SmartContract_ABI_Entry_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSmartContract_ABI_Entry_Type_RawValue(SmartContract_ABI_Entry *message, int32_t value) {
  GPBDescriptor *descriptor = [SmartContract_ABI_Entry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SmartContract_ABI_Entry_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SmartContract_ABI_Entry_StateMutability_RawValue(SmartContract_ABI_Entry *message) {
  GPBDescriptor *descriptor = [SmartContract_ABI_Entry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SmartContract_ABI_Entry_FieldNumber_StateMutability];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSmartContract_ABI_Entry_StateMutability_RawValue(SmartContract_ABI_Entry *message, int32_t value) {
  GPBDescriptor *descriptor = [SmartContract_ABI_Entry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SmartContract_ABI_Entry_FieldNumber_StateMutability];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum SmartContract_ABI_Entry_EntryType

GPBEnumDescriptor *SmartContract_ABI_Entry_EntryType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UnknownEntryType\000Constructor\000Function\000Ev"
        "ent\000Fallback\000Receive\000";
    static const int32_t values[] = {
        SmartContract_ABI_Entry_EntryType_UnknownEntryType,
        SmartContract_ABI_Entry_EntryType_Constructor,
        SmartContract_ABI_Entry_EntryType_Function,
        SmartContract_ABI_Entry_EntryType_Event,
        SmartContract_ABI_Entry_EntryType_Fallback,
        SmartContract_ABI_Entry_EntryType_Receive,
    };
    static const char *extraTextFormatInfo = "\006\000\020\000\001\013\000\002\010\000\003\005\000\004\010\000\005\007\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SmartContract_ABI_Entry_EntryType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SmartContract_ABI_Entry_EntryType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SmartContract_ABI_Entry_EntryType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SmartContract_ABI_Entry_EntryType_UnknownEntryType:
    case SmartContract_ABI_Entry_EntryType_Constructor:
    case SmartContract_ABI_Entry_EntryType_Function:
    case SmartContract_ABI_Entry_EntryType_Event:
    case SmartContract_ABI_Entry_EntryType_Fallback:
    case SmartContract_ABI_Entry_EntryType_Receive:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum SmartContract_ABI_Entry_StateMutabilityType

GPBEnumDescriptor *SmartContract_ABI_Entry_StateMutabilityType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UnknownMutabilityType\000Pure\000View\000Nonpayab"
        "le\000Payable\000";
    static const int32_t values[] = {
        SmartContract_ABI_Entry_StateMutabilityType_UnknownMutabilityType,
        SmartContract_ABI_Entry_StateMutabilityType_Pure,
        SmartContract_ABI_Entry_StateMutabilityType_View,
        SmartContract_ABI_Entry_StateMutabilityType_Nonpayable,
        SmartContract_ABI_Entry_StateMutabilityType_Payable,
    };
    static const char *extraTextFormatInfo = "\005\000\025\000\001\004\000\002\004\000\003\n\000\004\007\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SmartContract_ABI_Entry_StateMutabilityType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SmartContract_ABI_Entry_StateMutabilityType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SmartContract_ABI_Entry_StateMutabilityType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SmartContract_ABI_Entry_StateMutabilityType_UnknownMutabilityType:
    case SmartContract_ABI_Entry_StateMutabilityType_Pure:
    case SmartContract_ABI_Entry_StateMutabilityType_View:
    case SmartContract_ABI_Entry_StateMutabilityType_Nonpayable:
    case SmartContract_ABI_Entry_StateMutabilityType_Payable:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SmartContract_ABI_Entry_Param

@implementation SmartContract_ABI_Entry_Param

@dynamic indexed;
@dynamic name;
@dynamic type;

typedef struct SmartContract_ABI_Entry_Param__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *type;
} SmartContract_ABI_Entry_Param__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "indexed",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_ABI_Entry_Param_FieldNumber_Indexed,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_ABI_Entry_Param_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SmartContract_ABI_Entry_Param__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContract_ABI_Entry_Param_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SmartContract_ABI_Entry_Param__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SmartContract_ABI_Entry_Param class]
                                     rootClass:[SmartContractRoot class]
                                          file:SmartContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SmartContract_ABI_Entry_Param__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(SmartContract_ABI_Entry)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateSmartContract

@implementation CreateSmartContract

@dynamic ownerAddress;
@dynamic hasNewContract, newContract;
@dynamic callTokenValue;
@dynamic tokenId;
@dynamic type;
@dynamic rlpData;

typedef struct CreateSmartContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  SmartContract *newContract;
  NSData *rlpData;
  int64_t callTokenValue;
  int64_t tokenId;
  int64_t type;
} CreateSmartContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateSmartContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateSmartContract__storage_, ownerAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "newContract",
        .dataTypeSpecific.clazz = GPBObjCClass(SmartContract),
        .number = CreateSmartContract_FieldNumber_NewContract,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateSmartContract__storage_, newContract),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "callTokenValue",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateSmartContract_FieldNumber_CallTokenValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateSmartContract__storage_, callTokenValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tokenId",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateSmartContract_FieldNumber_TokenId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateSmartContract__storage_, tokenId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateSmartContract_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateSmartContract__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rlpData",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateSmartContract_FieldNumber_RlpData,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CreateSmartContract__storage_, rlpData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateSmartContract class]
                                     rootClass:[SmartContractRoot class]
                                          file:SmartContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateSmartContract__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TriggerSmartContract

@implementation TriggerSmartContract

@dynamic ownerAddress;
@dynamic contractAddress;
@dynamic callValue;
@dynamic data_p;
@dynamic callTokenValue;
@dynamic tokenId;
@dynamic type;
@dynamic rlpData;

typedef struct TriggerSmartContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *contractAddress;
  NSData *data_p;
  NSData *rlpData;
  int64_t callValue;
  int64_t callTokenValue;
  int64_t tokenId;
  int64_t type;
} TriggerSmartContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = TriggerSmartContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, ownerAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "contractAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = TriggerSmartContract_FieldNumber_ContractAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, contractAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "callValue",
        .dataTypeSpecific.clazz = Nil,
        .number = TriggerSmartContract_FieldNumber_CallValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, callValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = TriggerSmartContract_FieldNumber_Data_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "callTokenValue",
        .dataTypeSpecific.clazz = Nil,
        .number = TriggerSmartContract_FieldNumber_CallTokenValue,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, callTokenValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "tokenId",
        .dataTypeSpecific.clazz = Nil,
        .number = TriggerSmartContract_FieldNumber_TokenId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, tokenId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = TriggerSmartContract_FieldNumber_Type,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rlpData",
        .dataTypeSpecific.clazz = Nil,
        .number = TriggerSmartContract_FieldNumber_RlpData,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TriggerSmartContract__storage_, rlpData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TriggerSmartContract class]
                                     rootClass:[SmartContractRoot class]
                                          file:SmartContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TriggerSmartContract__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClearABIContract

@implementation ClearABIContract

@dynamic ownerAddress;
@dynamic contractAddress;

typedef struct ClearABIContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *contractAddress;
} ClearABIContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = ClearABIContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClearABIContract__storage_, ownerAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "contractAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = ClearABIContract_FieldNumber_ContractAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClearABIContract__storage_, contractAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClearABIContract class]
                                     rootClass:[SmartContractRoot class]
                                          file:SmartContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClearABIContract__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateSettingContract

@implementation UpdateSettingContract

@dynamic ownerAddress;
@dynamic contractAddress;
@dynamic consumeUserResourcePercent;

typedef struct UpdateSettingContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *contractAddress;
  int64_t consumeUserResourcePercent;
} UpdateSettingContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateSettingContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateSettingContract__storage_, ownerAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "contractAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateSettingContract_FieldNumber_ContractAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateSettingContract__storage_, contractAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "consumeUserResourcePercent",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateSettingContract_FieldNumber_ConsumeUserResourcePercent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateSettingContract__storage_, consumeUserResourcePercent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateSettingContract class]
                                     rootClass:[SmartContractRoot class]
                                          file:SmartContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateSettingContract__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateEntropyLimitContract

@implementation UpdateEntropyLimitContract

@dynamic ownerAddress;
@dynamic contractAddress;
@dynamic originEntropyLimit;

typedef struct UpdateEntropyLimitContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *contractAddress;
  int64_t originEntropyLimit;
} UpdateEntropyLimitContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateEntropyLimitContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateEntropyLimitContract__storage_, ownerAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "contractAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateEntropyLimitContract_FieldNumber_ContractAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateEntropyLimitContract__storage_, contractAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "originEntropyLimit",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateEntropyLimitContract_FieldNumber_OriginEntropyLimit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateEntropyLimitContract__storage_, originEntropyLimit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateEntropyLimitContract class]
                                     rootClass:[SmartContractRoot class]
                                          file:SmartContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateEntropyLimitContract__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SmartContractDataWrapper

@implementation SmartContractDataWrapper

@dynamic hasSmartContract, smartContract;
@dynamic runtimecode;

typedef struct SmartContractDataWrapper__storage_ {
  uint32_t _has_storage_[1];
  SmartContract *smartContract;
  NSData *runtimecode;
} SmartContractDataWrapper__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "smartContract",
        .dataTypeSpecific.clazz = GPBObjCClass(SmartContract),
        .number = SmartContractDataWrapper_FieldNumber_SmartContract,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SmartContractDataWrapper__storage_, smartContract),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "runtimecode",
        .dataTypeSpecific.clazz = Nil,
        .number = SmartContractDataWrapper_FieldNumber_Runtimecode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SmartContractDataWrapper__storage_, runtimecode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SmartContractDataWrapper class]
                                     rootClass:[SmartContractRoot class]
                                          file:SmartContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SmartContractDataWrapper__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
