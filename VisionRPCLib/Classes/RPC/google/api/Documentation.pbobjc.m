// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/documentation.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Documentation.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DocumentationRule);
GPBObjCClassDeclaration(Page);

#pragma mark - DocumentationRoot

@implementation DocumentationRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - DocumentationRoot_FileDescriptor

static GPBFileDescriptor *DocumentationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Documentation

@implementation Documentation

@dynamic summary;
@dynamic pagesArray, pagesArray_Count;
@dynamic rulesArray, rulesArray_Count;
@dynamic documentationRootURL;
@dynamic overview;

typedef struct Documentation__storage_ {
  uint32_t _has_storage_[1];
  NSString *summary;
  NSString *overview;
  NSMutableArray *rulesArray;
  NSString *documentationRootURL;
  NSMutableArray *pagesArray;
} Documentation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "summary",
        .dataTypeSpecific.clazz = Nil,
        .number = Documentation_FieldNumber_Summary,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Documentation__storage_, summary),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "overview",
        .dataTypeSpecific.clazz = Nil,
        .number = Documentation_FieldNumber_Overview,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Documentation__storage_, overview),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rulesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DocumentationRule),
        .number = Documentation_FieldNumber_RulesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Documentation__storage_, rulesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "documentationRootURL",
        .dataTypeSpecific.clazz = Nil,
        .number = Documentation_FieldNumber_DocumentationRootURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Documentation__storage_, documentationRootURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Page),
        .number = Documentation_FieldNumber_PagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Documentation__storage_, pagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Documentation class]
                                     rootClass:[DocumentationRoot class]
                                          file:DocumentationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Documentation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\r\244\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DocumentationRule

@implementation DocumentationRule

@dynamic selector;
@dynamic description_p;
@dynamic deprecationDescription;

typedef struct DocumentationRule__storage_ {
  uint32_t _has_storage_[1];
  NSString *selector;
  NSString *description_p;
  NSString *deprecationDescription;
} DocumentationRule__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "selector",
        .dataTypeSpecific.clazz = Nil,
        .number = DocumentationRule_FieldNumber_Selector,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DocumentationRule__storage_, selector),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = DocumentationRule_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DocumentationRule__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deprecationDescription",
        .dataTypeSpecific.clazz = Nil,
        .number = DocumentationRule_FieldNumber_DeprecationDescription,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DocumentationRule__storage_, deprecationDescription),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DocumentationRule class]
                                     rootClass:[DocumentationRoot class]
                                          file:DocumentationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DocumentationRule__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Page

@implementation Page

@dynamic name;
@dynamic content;
@dynamic subpagesArray, subpagesArray_Count;

typedef struct Page__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *content;
  NSMutableArray *subpagesArray;
} Page__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Page_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Page__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = Nil,
        .number = Page_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Page__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subpagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Page),
        .number = Page_FieldNumber_SubpagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Page__storage_, subpagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Page class]
                                     rootClass:[DocumentationRoot class]
                                          file:DocumentationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Page__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
